{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mylib","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.*</li> <li>pip &gt;= 20.0.2</li> </ul>"},{"location":"#installing-by-using-pypi","title":"Installing by using PyPi","text":"<p>Install</p> <pre><code>    git clone https://github.com/Intelligent-Systems-Phystech/ProjectTemplate.git /tmp/ProjectTemplate\n    python3 -m pip install /tmp/ProjectTemplate/src/\n</code></pre> <p>Uninstall</p> <pre><code>  python3 -m pip uninstall mylib\n</code></pre>"},{"location":"autodoc/train/","title":"Documentation for <code>train.py</code>","text":""},{"location":"autodoc/train/#mylib.train","title":"<code>mylib.train</code>","text":"<p>Module description</p>"},{"location":"autodoc/train/#mylib.train.SyntheticBernuliDataset","title":"<code>SyntheticBernuliDataset(n: int = 10, m: int = 100, seed: int = 42)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for synthetic dataset.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>feature number. Defaults to 10.</p> <code>10</code> <code>m</code> <code>int</code> <p>object number. Defaults to 100.</p> <code>100</code> <code>seed</code> <code>int</code> <p>random state seed. Defaults to 42.</p> <code>42</code>"},{"location":"autodoc/train/#mylib.train.SyntheticBernuliDataset.w","title":"<code>w = rs.randn(n)</code>  <code>instance-attribute</code>","text":""},{"location":"autodoc/train/#mylib.train.SyntheticBernuliDataset.X","title":"<code>X = rs.randn(m, n)</code>  <code>instance-attribute</code>","text":""},{"location":"autodoc/train/#mylib.train.SyntheticBernuliDataset.y","title":"<code>y = rs.binomial(1, expit(self.X @ self.w))</code>  <code>instance-attribute</code>","text":""},{"location":"autodoc/train/#mylib.train.Trainer","title":"<code>Trainer(model, X: np.ndarray, Y: np.ndarray, seed: int = 42)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for all trainers.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <p>The class with fit and predict methods.</p> required <code>X</code> <code>ndarray</code> <p>The array of shape [num_elemennts, num_feature]</p> required <code>Y</code> <code>ndarray</code> <p>[num_elements, num_answers]</p> required <code>seed</code> <code>int</code> <p>random state seed. Defaults to 42.</p> <code>42</code>"},{"location":"autodoc/train/#mylib.train.Trainer.model","title":"<code>model = model</code>  <code>instance-attribute</code>","text":""},{"location":"autodoc/train/#mylib.train.Trainer.seed","title":"<code>seed = seed</code>  <code>instance-attribute</code>","text":""},{"location":"autodoc/train/#mylib.train.Trainer.train","title":"<code>train()</code>","text":"<p>Train model</p>"},{"location":"autodoc/train/#mylib.train.Trainer.eval","title":"<code>eval(output_dict: bool = False) -&gt; str | dict</code>","text":"<p>Evaluate model for initial validadtion dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_dict</code> <code>bool</code> <p>If True, return output as dict.</p> <code>False</code> <p>Returns:</p> Type Description <code>str | dict</code> <p>classification report</p>"},{"location":"autodoc/train/#mylib.train.Trainer.test","title":"<code>test(X: np.ndarray, Y: np.ndarray, output_dict: bool = False) -&gt; str | dict</code>","text":"<p>Evaluate model for given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>ndarray</code> <p>The array of shape [num_elements, num_feature]</p> required <code>Y</code> <code>ndarray</code> <p>The array of shape [num_elements, num_answers]</p> required <code>output_dict</code> <code>bool</code> <p>If True, return output as dict. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str | dict</code> <p>classification report</p>"},{"location":"autodoc/train/#mylib.train.cv_parameters","title":"<code>cv_parameters(X: np.ndarray, Y: np.ndarray, seed: int = 42, minimal: float = 0.1, maximum: float = 25, count: int = 100) -&gt; tuple[np.ndarray, list[float], list]</code>","text":"<p>Function for the experiment with different regularisation parameters (\"Cs\")     and return accuracy and params for LogisticRegression for each parameter.    </p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>ndarray</code> <p>The array of shape [num_elements, num_feature]</p> required <code>Y</code> <code>ndarray</code> <p>The array of shape [num_elements, num_answers]</p> required <code>seed</code> <code>int</code> <p>Seed for random state. Defaults to 42.</p> <code>42</code> <code>minimal</code> <code>float</code> <p>Minimum value for the Cs linspace. Defaults to 0.1.</p> <code>0.1</code> <code>maximum</code> <code>float</code> <p>Maximum value for the Cs linspace. Defaults to 25.</p> <code>25</code> <code>count</code> <code>int</code> <p>Number of the Cs points. Defaults to 100.</p> <code>100</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Cs</p> <code>list[float]</code> <p>list of accuracies</p> <code>list</code> <p>list of params</p>"}]}